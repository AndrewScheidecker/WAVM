;; Test all the bitwise operators on major boundary values and all special values.

(module
  (func (export "not") (param $0 v128) (result v128) (v128.not (local.get $0)))
  (func (export "and") (param $0 v128) (param $1 v128) (result v128) (v128.and (local.get $0) (local.get $1)))
  (func (export "or") (param $0 v128) (param $1 v128) (result v128) (v128.or (local.get $0) (local.get $1)))
  (func (export "xor") (param $0 v128) (param $1 v128) (result v128) (v128.xor (local.get $0) (local.get $1)))
  (func (export "bitselect") (param $0 v128) (param $1 v128) (param $2 v128) (result v128)
    (v128.bitselect (local.get $0) (local.get $1) (local.get $2))
  )
)

;; bitwise operations

;; i8x16
(assert_return (invoke "not" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
                             (v128.const i8x16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "not" (v128.const i8x16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1))
                             (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "not" (v128.const i8x16 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0))
                             (v128.const i8x16 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1))
(assert_return (invoke "not" (v128.const i8x16 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1))
                             (v128.const i8x16 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0))
(assert_return (invoke "not" (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55))
                             (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA))
(assert_return (invoke "not" (v128.const i8x16 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204))
                             (v128.const i8x16 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51))
(assert_return (invoke "and" (v128.const i8x16 0 0 -1 -1 0 0 -1 -1 0 0 -1 -1 0 0 -1 -1)
                             (v128.const i8x16 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1))
                             (v128.const i8x16 0 0 0 -1 0 0 0 -1 0 0 0 -1 0 0 0 -1))
(assert_return (invoke "and" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
                             (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "and" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (v128.const i8x16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1))
                             (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "and" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
                             (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "and" (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
                             (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
                             (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
(assert_return (invoke "and" (v128.const i8x16 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255)
                             (v128.const i8x16 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85))
                             (v128.const i8x16 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85))
(assert_return (invoke "and" (v128.const i8x16 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255)
                             (v128.const i8x16 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128))
                             (v128.const i8x16 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128))
(assert_return (invoke "and" (v128.const i8x16 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170)
                             (v128.const i8x16 10 128 5 165 10 128 5 165 10 128 5 165 10 128 5 165))
                             (v128.const i8x16 10 128 0 160 10 128 0 160 10 128 0 160 10 128 0 160))
(assert_return (invoke "and" (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF)
                             (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55))
                             (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55))
(assert_return (invoke "and" (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF)
                             (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA))
                             (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA))
(assert_return (invoke "and" (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF)
                             (v128.const i8x16 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                             (v128.const i8x16 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
(assert_return (invoke "and" (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55)
                             (v128.const i8x16 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5))
                             (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55))
(assert_return (invoke "or" (v128.const i8x16 0 0 -1 -1 0 0 -1 -1 0 0 -1 -1 0 0 -1 -1)
                            (v128.const i8x16 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1))
                            (v128.const i8x16 0 -1 -1 -1 0 -1 -1 -1 0 -1 -1 -1 0 -1 -1 -1))
(assert_return (invoke "or" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                            (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
                            (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "or" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                            (v128.const i8x16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1))
                            (v128.const i8x16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "or" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                            (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
                            (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
(assert_return (invoke "or" (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
                            (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
                            (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
(assert_return (invoke "or" (v128.const i8x16 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255)
                            (v128.const i8x16 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85))
                            (v128.const i8x16 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255))
(assert_return (invoke "or" (v128.const i8x16 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255)
                            (v128.const i8x16 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128))
                            (v128.const i8x16 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255))
(assert_return (invoke "or" (v128.const i8x16 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170)
                            (v128.const i8x16 10 128 5 165 10 128 5 165 10 128 5 165 10 128 5 165))
                            (v128.const i8x16 170 170 175 175 170 170 175 175 170 170 175 175 170 170 175 175))
(assert_return (invoke "or" (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF)
                            (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55))
                            (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
(assert_return (invoke "or" (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF)
                            (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA))
                            (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
(assert_return (invoke "or" (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF)
                            (v128.const i8x16 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                            (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
(assert_return (invoke "or" (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55)
                            (v128.const i8x16 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5))
                            (v128.const i8x16 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5))
(assert_return (invoke "xor" (v128.const i8x16 0 0 -1 -1 0 0 -1 -1 0 0 -1 -1 0 0 -1 -1)
                             (v128.const i8x16 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1))
                             (v128.const i8x16 0 -1 -1 0 0 -1 -1 0 0 -1 -1 0 0 -1 -1 0))
(assert_return (invoke "xor" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
                             (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "xor" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (v128.const i8x16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1))
                             (v128.const i8x16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "xor" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
                             (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
(assert_return (invoke "xor" (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
                             (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
                             (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "xor" (v128.const i8x16 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255)
                             (v128.const i8x16 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85))
                             (v128.const i8x16 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170))
(assert_return (invoke "xor" (v128.const i8x16 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255)
                             (v128.const i8x16 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128))
                             (v128.const i8x16 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127))
(assert_return (invoke "xor" (v128.const i8x16 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170)
                             (v128.const i8x16 10 128 5 165 10 128 5 165 10 128 5 165 10 128 5 165))
                             (v128.const i8x16 160 42 175 15 160 42 175 15 160 42 175 15 160 42 175 15))
(assert_return (invoke "xor" (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF)
                             (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55))
                             (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA))
(assert_return (invoke "xor" (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF)
                             (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA))
                             (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55))
(assert_return (invoke "xor" (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF)
                             (v128.const i8x16 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                             (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
(assert_return (invoke "xor" (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55)
                             (v128.const i8x16 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5))
                             (v128.const i8x16 0x00 0xAA 0x0A 0xA0 0x00 0xAA 0x0A 0xA0 0x00 0xAA 0x0A 0xA0 0x00 0xAA 0x0A 0xA0))
(assert_return (invoke "bitselect" (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA)
                                   (v128.const i8x16 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB)
                                   (v128.const i8x16 0x00 0x11 0x23 0x45 0xF0 0x0F 0xFF 0xFF 16 17 32 33 0xBB 0xAA 0xBB 0xAA))
                                   (v128.const i8x16 0xBB 0xAA 0xBA 0xBA 0xAB 0xBA 0xAA 0xAA 0xAB 0xAA 0xBB 0xBA 0xAA 0xBB 0xAA 0xBB))
(assert_return (invoke "bitselect" (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA)
                                   (v128.const i8x16 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB)
                                   (v128.const i8x16 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                                   (v128.const i8x16 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB))
(assert_return (invoke "bitselect" (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA)
                                   (v128.const i8x16 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB)
                                   (v128.const i8x16 0x11 0x11 0x11 0x11 0x11 0x11 0x11 0x11 0x11 0x11 0x11 0x11 0x11 0x11 0x11 0x11))
                                   (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA))
(assert_return (invoke "bitselect" (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA)
                                   (v128.const i8x16 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB 0xBB)
                                   (v128.const i8x16 0x01 0x23 0x45 0x67 0x89 0xAB 0xCD 0xEF 0xFE 0xDC 0xBA 0x98 0x76 0x54 0x32 0x10))
                                   (v128.const i8x16 0xBA 0xBA 0xBA 0xBA 0xBA 0xBA 0xBA 0xBA 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB))
(assert_return (invoke "bitselect" (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA)
                                   (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55)
                                   (v128.const i8x16 0x01 0x23 0x45 0x67 0x89 0xAB 0xCD 0xEF 0xFE 0xDC 0xBA 0x98 0x76 0x54 0x32 0x10))
                                   (v128.const i8x16 0x54 0x76 0x10 0x32 0xDC 0xFE 0x98 0xBA 0xAB 0x89 0xEF 0xCD 0x23 0x01 0x67 0x45))
(assert_return (invoke "bitselect" (v128.const i8x16 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA)
                                   (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55)
                                   (v128.const i8x16 0x55 0x55 0x55 0x55 0xAA 0xAA 0xAA 0xAA 0x00 0x00 0x00 0x00 0xFF 0xFF 0xFF 0xFF))
                                   (v128.const i8x16 0x00 0x00 0x00 0x00 0xFF 0xFF 0xFF 0xFF 0x55 0x55 0x55 0x55 0xAA 0xAA 0xAA 0xAA))

;; i16x8
(assert_return (invoke "not" (v128.const i16x8 0 0 0 0 0 0 0 0))
                             (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "not" (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                             (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "not" (v128.const i16x8 -1 0 -1 0 -1 0 -1 0))
                             (v128.const i16x8 0 -1 0 -1 0 -1 0 -1))
(assert_return (invoke "not" (v128.const i16x8 0 -1 0 -1 0 -1 0 -1))
                             (v128.const i16x8 -1 0 -1 0 -1 0 -1 0))
(assert_return (invoke "not" (v128.const i16x8 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555))
                             (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA))
(assert_return (invoke "not" (v128.const i16x8 204 204 204 204 204 204 204 204))
                             (v128.const i16x8 65331 65331 65331 65331 65331 65331 65331 65331))
(assert_return (invoke "and" (v128.const i16x8 0 0 -1 -1 0 0 -1 -1)
                             (v128.const i16x8 0 -1 0 -1 0 -1 0 -1))
                             (v128.const i16x8 0 0 0 -1 0 0 0 -1))
(assert_return (invoke "and" (v128.const i16x8 0 0 0 0 0 0 0 0)
                             (v128.const i16x8 0 0 0 0 0 0 0 0))
                             (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "and" (v128.const i16x8 0 0 0 0 0 0 0 0)
                             (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                             (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "and" (v128.const i16x8 0 0 0 0 0 0 0 0)
                             (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF))
                             (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "and" (v128.const i16x8 1 1 1 1 1 1 1 1)
                             (v128.const i16x8 1 1 1 1 1 1 1 1))
                             (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "and" (v128.const i16x8 255 255 255 255 255 255 255 255)
                             (v128.const i16x8 85 85 85 85 85 85 85 85))
                             (v128.const i16x8 85 85 85 85 85 85 85 85))
(assert_return (invoke "and" (v128.const i16x8 255 255 255 255 255 255 255 255)
                             (v128.const i16x8 128 128 128 128 128 128 128 128))
                             (v128.const i16x8 128 128 128 128 128 128 128 128))
(assert_return (invoke "and" (v128.const i16x8 170 170 170 170 170 170 170 170)
                             (v128.const i16x8 10 128 5 165 10 128 5 165))
                             (v128.const i16x8 10 128 0 160 10 128 0 160))
(assert_return (invoke "and" (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF)
                             (v128.const i16x8 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555))
                             (v128.const i16x8 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555))
(assert_return (invoke "and" (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF)
                             (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA))
                             (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA))
(assert_return (invoke "and" (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF)
                             (v128.const i16x8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                             (v128.const i16x8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
(assert_return (invoke "and" (v128.const i16x8 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555)
                             (v128.const i16x8 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5))
                             (v128.const i16x8 0x0055 0x0055 0x0055 0x0055 0x0055 0x0055 0x0055 0x0055))
(assert_return (invoke "or" (v128.const i16x8 0 0 -1 -1 0 0 -1 -1)
                            (v128.const i16x8 0 -1 0 -1 0 -1 0 -1))
                            (v128.const i16x8 0 -1 -1 -1 0 -1 -1 -1))
(assert_return (invoke "or" (v128.const i16x8 0 0 0 0 0 0 0 0)
                            (v128.const i16x8 0 0 0 0 0 0 0 0))
                            (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "or" (v128.const i16x8 0 0 0 0 0 0 0 0)
                            (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                            (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "or" (v128.const i16x8 0 0 0 0 0 0 0 0)
                            (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF))
                            (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF))
(assert_return (invoke "or" (v128.const i16x8 1 1 1 1 1 1 1 1)
                            (v128.const i16x8 1 1 1 1 1 1 1 1))
                            (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "or" (v128.const i16x8 255 255 255 255 255 255 255 255)
                            (v128.const i16x8 85 85 85 85 85 85 85 85))
                            (v128.const i16x8 255 255 255 255 255 255 255 255))
(assert_return (invoke "or" (v128.const i16x8 255 255 255 255 255 255 255 255)
                            (v128.const i16x8 128 128 128 128 128 128 128 128))
                            (v128.const i16x8 255 255 255 255 255 255 255 255))
(assert_return (invoke "or" (v128.const i16x8 170 170 170 170 170 170 170 170)
                            (v128.const i16x8 10 128 5 165 10 128 5 165))
                            (v128.const i16x8 170 170 175 175 170 170 175 175))
(assert_return (invoke "or" (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF)
                            (v128.const i16x8 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555))
                            (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF))
(assert_return (invoke "or" (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF)
                            (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA))
                            (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF))
(assert_return (invoke "or" (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF)
                            (v128.const i16x8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                            (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF))
(assert_return (invoke "or" (v128.const i16x8 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555)
                            (v128.const i16x8 0x55 0xFF 0x5F 0xF5 0x55 0xFF 0x5F 0xF5))
                            (v128.const i16x8 0x5555 0x55FF 0x555F 0x55F5 0x5555 0x55FF 0x555F 0x55F5))
(assert_return (invoke "xor" (v128.const i16x8 0 0 -1 -1 0 0 -1 -1)
                             (v128.const i16x8 0 -1 0 -1 0 -1 0 -1))
                             (v128.const i16x8 0 -1 -1 0 0 -1 -1 0))
(assert_return (invoke "xor" (v128.const i16x8 0 0 0 0 0 0 0 0)
                             (v128.const i16x8 0 0 0 0 0 0 0 0))
                             (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "xor" (v128.const i16x8 0 0 0 0 0 0 0 0)
                             (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                             (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "xor" (v128.const i16x8 0 0 0 0 0 0 0 0)
                             (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF))
                             (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF))
(assert_return (invoke "xor" (v128.const i16x8 1 1 1 1 1 1 1 1)
                             (v128.const i16x8 1 1 1 1 1 1 1 1))
                             (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "xor" (v128.const i16x8 255 255 255 255 255 255 255 255)
                             (v128.const i16x8 85 85 85 85 85 85 85 85))
                             (v128.const i16x8 170 170 170 170 170 170 170 170))
(assert_return (invoke "xor" (v128.const i16x8 255 255 255 255 255 255 255 255)
                             (v128.const i16x8 128 128 128 128 128 128 128 128))
                             (v128.const i16x8 127 127 127 127 127 127 127 127))
(assert_return (invoke "xor" (v128.const i16x8 170 170 170 170 170 170 170 170)
                             (v128.const i16x8 10 128 5 165 10 128 5 165))
                             (v128.const i16x8 160 42 175 15 160 42 175 15))
(assert_return (invoke "xor" (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF)
                             (v128.const i16x8 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555))
                             (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA))
(assert_return (invoke "xor" (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF)
                             (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA))
                             (v128.const i16x8 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555))
(assert_return (invoke "xor" (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF)
                             (v128.const i16x8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                             (v128.const i16x8 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF 0xFFFF))
(assert_return (invoke "xor" (v128.const i16x8 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555)
                             (v128.const i16x8 0x0055 0x00FF 0x005F 0x00F5 0x0055 0x00FF 0x005F 0x00F5))
                             (v128.const i16x8 0x5500 0x55AA 0x550A 0x55A0 0x5500 0x55AA 0x550A 0x55A0))
(assert_return (invoke "bitselect" (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA)
                                   (v128.const i16x8 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB)
                                   (v128.const i16x8 0x0011 0x2345 0xF00F 0xFFFF 4113 8225 0xBBAA 0xBBAA))
                                   (v128.const i16x8 0xBBAA 0xBABA 0xABBA 0xAAAA 0xABAA 0xBBBA 0xAABB 0xAABB))
(assert_return (invoke "bitselect" (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA)
                                   (v128.const i16x8 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB)
                                   (v128.const i16x8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                                   (v128.const i16x8 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB))
(assert_return (invoke "bitselect" (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA)
                                   (v128.const i16x8 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB)
                                   (v128.const i16x8 0x1111 0x1111 0x1111 0x1111 0x1111 0x1111 0x1111 0x1111))
                                   (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA))
(assert_return (invoke "bitselect" (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA)
                                   (v128.const i16x8 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB 0xBBBB)
                                   (v128.const i16x8 0x0123 0x4567 0x89AB 0xCDEF 0xFEDC 0xBA98 0x7654 0x3210))
                                   (v128.const i16x8 0xBABA 0xBABA 0xBABA 0xBABA 0xABAB 0xABAB 0xABAB 0xABAB))
(assert_return (invoke "bitselect" (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA)
                                   (v128.const i16x8 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555)
                                   (v128.const i16x8 0x0123 0x4567 0x89AB 0xCDEF 0xFEDC 0xBA98 0x7654 0x3210))
                                   (v128.const i16x8 0x5476 0x1032 0xDCFE 0x98BA 0xAB89 0xEFCD 0x2301 0x6745))
(assert_return (invoke "bitselect" (v128.const i16x8 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA 0xAAAA)
                                   (v128.const i16x8 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555 0x5555)
                                   (v128.const i16x8 0x5555 0x5555 0xAAAA 0xAAAA 0x0000 0x0000 0xFFFF 0xFFFF))
                                   (v128.const i16x8 0x0000 0x0000 0xFFFF 0xFFFF 0x5555 0x5555 0xAAAA 0xAAAA))

;; i32x4
(assert_return (invoke "not" (v128.const i32x4 0 0 0 0))
                             (v128.const i32x4 -1 -1 -1 -1))
(assert_return (invoke "not" (v128.const i32x4 -1 -1 -1 -1))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "not" (v128.const i32x4 -1 0 -1 0))
                             (v128.const i32x4 0 -1 0 -1))
(assert_return (invoke "not" (v128.const i32x4 0 -1 0 -1))
                             (v128.const i32x4 -1 0 -1 0))
(assert_return (invoke "not" (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                             (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
(assert_return (invoke "not" (v128.const i32x4 3435973836 3435973836 3435973836 3435973836))
                             (v128.const i32x4 858993459 858993459 858993459 858993459))
(assert_return (invoke "and" (v128.const i32x4 0 0 -1 -1)
                             (v128.const i32x4 0 -1 0 -1))
                             (v128.const i32x4 0 0 0 -1))
(assert_return (invoke "and" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 0 0 0 0))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "and" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 -1 -1 -1 -1))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "and" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "and" (v128.const i32x4 1 1 1 1)
                             (v128.const i32x4 1 1 1 1))
                             (v128.const i32x4 1 1 1 1))
(assert_return (invoke "and" (v128.const i32x4 255 255 255 255)
                             (v128.const i32x4 85 85 85 85))
                             (v128.const i32x4 85 85 85 85))
(assert_return (invoke "and" (v128.const i32x4 255 255 255 255)
                             (v128.const i32x4 128 128 128 128))
                             (v128.const i32x4 128 128 128 128))
(assert_return (invoke "and" (v128.const i32x4 2863311530 2863311530 2863311530 2863311530)
                             (v128.const i32x4 10 128 5 165))
                             (v128.const i32x4 10 128 0 160))
(assert_return (invoke "and" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                             (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
(assert_return (invoke "and" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
                             (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
(assert_return (invoke "and" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0x0 0x0 0x0 0x0))
                             (v128.const i32x4 0x0 0x0 0x0 0x0))
(assert_return (invoke "and" (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                             (v128.const i32x4 0x5555 0xFFFF 0x55FF 0x5FFF))
                             (v128.const i32x4 0x5555 0x5555 0x5555 0x5555))
(assert_return (invoke "or" (v128.const i32x4 0 0 -1 -1)
                            (v128.const i32x4 0 -1 0 -1))
                            (v128.const i32x4 0 -1 -1 -1))
(assert_return (invoke "or" (v128.const i32x4 0 0 0 0)
                            (v128.const i32x4 0 0 0 0))
                            (v128.const i32x4 0 0 0 0))
(assert_return (invoke "or" (v128.const i32x4 0 0 0 0)
                            (v128.const i32x4 -1 -1 -1 -1))
                            (v128.const i32x4 -1 -1 -1 -1))
(assert_return (invoke "or" (v128.const i32x4 0 0 0 0)
                            (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                            (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "or" (v128.const i32x4 1 1 1 1)
                            (v128.const i32x4 1 1 1 1))
                            (v128.const i32x4 1 1 1 1))
(assert_return (invoke "or" (v128.const i32x4 255 255 255 255)
                            (v128.const i32x4 85 85 85 85))
                            (v128.const i32x4 255 255 255 255))
(assert_return (invoke "or" (v128.const i32x4 255 255 255 255)
                            (v128.const i32x4 128 128 128 128))
                            (v128.const i32x4 255 255 255 255))
(assert_return (invoke "or" (v128.const i32x4 2863311530 2863311530 2863311530 2863311530)
                            (v128.const i32x4 10 128 5 165))
                            (v128.const i32x4 2863311530 2863311530 2863311535 2863311535))
(assert_return (invoke "or" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                            (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                            (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "or" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                            (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
                            (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "or" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                            (v128.const i32x4 0x0 0x0 0x0 0x0))
                            (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "or" (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                            (v128.const i32x4 0x5555 0xFFFF 0x55FF 0x5FFF))
                            (v128.const i32x4 0x55555555 0x5555ffff 0x555555ff 0x55555fff))
(assert_return (invoke "xor" (v128.const i32x4 0 0 -1 -1)
                             (v128.const i32x4 0 -1 0 -1))
                             (v128.const i32x4 0 -1 -1 0))
(assert_return (invoke "xor" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 0 0 0 0))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "xor" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 -1 -1 -1 -1))
                             (v128.const i32x4 -1 -1 -1 -1))
(assert_return (invoke "xor" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                             (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "xor" (v128.const i32x4 1 1 1 1)
                             (v128.const i32x4 1 1 1 1))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "xor" (v128.const i32x4 255 255 255 255)
                             (v128.const i32x4 85 85 85 85))
                             (v128.const i32x4 170 170 170 170))
(assert_return (invoke "xor" (v128.const i32x4 255 255 255 255)
                             (v128.const i32x4 128 128 128 128))
                             (v128.const i32x4 127 127 127 127))
(assert_return (invoke "xor" (v128.const i32x4 2863311530 2863311530 2863311530 2863311530)
                             (v128.const i32x4 10 128 5 165))
                             (v128.const i32x4 2863311520 2863311402 2863311535 2863311375))
(assert_return (invoke "xor" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                             (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
(assert_return (invoke "xor" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
                             (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
(assert_return (invoke "xor" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0x0 0x0 0x0 0x0))
                             (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "xor" (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                             (v128.const i32x4 0x5555 0xFFFF 0x55FF 0x5FFF))
                             (v128.const i32x4 0x55550000 0x5555AAAA 0x555500AA 0x55550AAA))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const i32x4 0x00112345 0xF00FFFFF 0x10112021 0xBBAABBAA))
                                   (v128.const i32x4 0xBBAABABA 0xABBAAAAA 0xABAABBBA 0xAABBAABB))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000))
                                   (v128.const i32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const i32x4 0x11111111 0x11111111 0x11111111 0x11111111))
                                   (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const i32x4 0x01234567 0x89ABCDEF 0xFEDCBA98 0x76543210))
                                   (v128.const i32x4 0xBABABABA 0xBABABABA 0xABABABAB 0xABABABAB))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                                   (v128.const i32x4 0x01234567 0x89ABCDEF 0xFEDCBA98 0x76543210))
                                   (v128.const i32x4 0x54761032 0xDCFE98BA 0xAB89EFCD 0x23016745))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                                   (v128.const i32x4 0x55555555 0xAAAAAAAA 0x00000000 0xFFFFFFFF))
                                   (v128.const i32x4 0x00000000 0xFFFFFFFF 0x55555555 0xAAAAAAAA))

;; f32x4
(assert_return (invoke "not" (v128.const f32x4 nan nan nan nan))
                             (v128.const i32x4 0x803fffff 0x803fffff 0x803fffff 0x803fffff))
(assert_return (invoke "not" (v128.const f32x4 inf inf inf inf))
                             (v128.const i32x4 0x807fffff 0x807fffff 0x807fffff 0x807fffff))
(assert_return (invoke "not" (v128.const f32x4 -nan -nan -nan -nan))
                             (v128.const i32x4 0x003fffff 0x003fffff 0x003fffff 0x003fffff))
(assert_return (invoke "not" (v128.const f32x4 -inf -inf -inf -inf))
                             (v128.const i32x4 0x007fffff 0x007fffff 0x007fffff 0x007fffff))
(assert_return (invoke "not" (v128.const f32x4 0 0 0 0))
                             (v128.const i32x4 -1 -1 -1 -1))
(assert_return (invoke "not" (v128.const f32x4 -1 -1 -1 -1))
                             (v128.const i32x4 0x407fffff 0x407fffff 0x407fffff 0x407fffff))
(assert_return (invoke "not" (v128.const f32x4 -1 0 -1 0))
                             (v128.const i32x4 0x407fffff 0xffffffff 0x407fffff 0xffffffff))
(assert_return (invoke "not" (v128.const f32x4 0 -1 0 -1))
                             (v128.const i32x4 0xffffffff 0x407fffff 0xffffffff 0x407fffff))
(assert_return (invoke "not" (v128.const f32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                             (v128.const i32x4 0xb1555554 0xb1555554 0xb1555554 0xb1555554))
(assert_return (invoke "not" (v128.const f32x4 3435973836 3435973836 3435973836 3435973836))
                             (v128.const i32x4 0xb0b33332 0xb0b33332 0xb0b33332 0xb0b33332))
(assert_return (invoke "and" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 0 0 0 0))
                             (v128.const f32x4 0 0 0 0))
(assert_return (invoke "and" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 inf inf inf inf))
                             (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "and" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                             (v128.const i32x4 0x4f800000 0x4f800000 0x4f800000 0x4f800000))
(assert_return (invoke "and" (v128.const f32x4 inf inf inf inf)
                             (v128.const f32x4 0 0 0 0))
                             (v128.const f32x4 0 0 0 0))
(assert_return (invoke "and" (v128.const f32x4 inf inf inf inf)
                             (v128.const f32x4 nan nan nan nan))
                             (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "and" (v128.const f32x4 inf inf inf inf)
                             (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                             (v128.const i32x4 0x4f800000 0x4f800000 0x4f800000 0x4f800000))
(assert_return (invoke "and" (v128.const f32x4 -nan -nan -nan -nan)
                             (v128.const f32x4 -inf -inf -inf -inf))
                             (v128.const f32x4 -inf -inf -inf -inf))
(assert_return (invoke "and" (v128.const f32x4 0 0 -1 -1)
                             (v128.const f32x4 0 -1 0 -1))
                             (v128.const f32x4 0x00000000 0x00000000 0x00000000 -1))
(assert_return (invoke "and" (v128.const f32x4 0 0 0 0)
                             (v128.const f32x4 0 0 0 0))
                             (v128.const f32x4 0 0 0 0))
(assert_return (invoke "and" (v128.const f32x4 0 0 0 0)
                             (v128.const f32x4 -1 -1 -1 -1))
                             (v128.const f32x4 0 0 0 0))
(assert_return (invoke "and" (v128.const f32x4 0 0 0 0)
                             (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                             (v128.const f32x4 0 0 0 0))
(assert_return (invoke "and" (v128.const f32x4 1 1 1 1)
                             (v128.const f32x4 1 1 1 1))
                             (v128.const f32x4 1 1 1 1))
(assert_return (invoke "and" (v128.const f32x4 255 255 255 255)
                             (v128.const f32x4 85 85 85 85))
                             (v128.const f32x4 42.5 42.5 42.5 42.5))
(assert_return (invoke "and" (v128.const f32x4 255 255 255 255)
                             (v128.const f32x4 128 128 128 128))
                             (v128.const f32x4 128 128 128 128))
(assert_return (invoke "and" (v128.const f32x4 2863311530 2863311530 2863311530 2863311530)
                             (v128.const f32x4 10 128 5 165))
                             (v128.const f32x4 10 128 2.5 160))
(assert_return (invoke "and" (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const f32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                             (v128.const i32x4 0x4e800000 0x4e800000 0x4e800000 0x4e800000))
(assert_return (invoke "and" (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const f32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
                             (v128.const i32x4 0x4f000000 0x4f000000 0x4f000000 0x4f000000))
(assert_return (invoke "and" (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const f32x4 0x0 0x0 0x0 0x0))
                             (v128.const f32x4 0x0 0x0 0x0 0x0))
(assert_return (invoke "and" (v128.const f32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                             (v128.const f32x4 0x5555 0xFFFF 0x55FF 0x5FFF))
                             (v128.const f32x4 21845 10922.5 21845 21845))
(assert_return (invoke "or" (v128.const f32x4 nan nan nan nan)
                            (v128.const f32x4 0 0 0 0))
                            (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "or" (v128.const f32x4 nan nan nan nan)
                            (v128.const f32x4 inf inf inf inf))
                            (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "or" (v128.const f32x4 nan nan nan nan)
                            (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                            (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "or" (v128.const f32x4 inf inf inf inf)
                            (v128.const f32x4 0 0 0 0))
                            (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "or" (v128.const f32x4 inf inf inf inf)
                            (v128.const f32x4 nan nan nan nan))
                            (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "or" (v128.const f32x4 inf inf inf inf)
                            (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                            (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "or" (v128.const f32x4 -nan -nan -nan -nan)
                            (v128.const f32x4 -inf -inf -inf -inf))
                            (v128.const f32x4 -nan -nan -nan -nan))
(assert_return (invoke "or" (v128.const f32x4 0 0 -1 -1)
                            (v128.const f32x4 0 -1 0 -1))
                            (v128.const f32x4 0 -1 -1 -1))
(assert_return (invoke "or" (v128.const f32x4 0 0 0 0)
                            (v128.const f32x4 0 0 0 0))
                            (v128.const f32x4 0 0 0 0))
(assert_return (invoke "or" (v128.const f32x4 0 0 0 0)
                            (v128.const f32x4 -1 -1 -1 -1))
                            (v128.const f32x4 -1 -1 -1 -1))
(assert_return (invoke "or" (v128.const f32x4 0 0 0 0)
                            (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                            (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "or" (v128.const f32x4 1 1 1 1)
                            (v128.const f32x4 1 1 1 1))
                            (v128.const f32x4 1 1 1 1))
(assert_return (invoke "or" (v128.const f32x4 255 255 255 255)
                            (v128.const f32x4 85 85 85 85))
                            (v128.const f32x4 510 510 510 510))
(assert_return (invoke "or" (v128.const f32x4 255 255 255 255)
                            (v128.const f32x4 128 128 128 128))
                            (v128.const f32x4 255 255 255 255))
(assert_return (invoke "or" (v128.const f32x4 2863311530 2863311530 2863311530 2863311530)
                            (v128.const f32x4 10 128 5 165))
                            (v128.const i32x4 0x4f2aaaab 0x4f2aaaab 0x4faaaaab 0x4f2faaab))
(assert_return (invoke "or" (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                            (v128.const f32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                            (v128.const i32x4 0x4faaaaab 0x4faaaaab 0x4faaaaab 0x4faaaaab))
(assert_return (invoke "or" (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                            (v128.const f32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
                            (v128.const i32x4 0x4faaaaab 0x4faaaaab 0x4faaaaab 0x4faaaaab))
(assert_return (invoke "or" (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                            (v128.const f32x4 0x0 0x0 0x0 0x0))
                            (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "or" (v128.const f32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                            (v128.const f32x4 0x5555 0xFFFF 0x55FF 0x5FFF))
                            (v128.const i32x4 0x4eaaaaab 0x4fffffab 0x4eabfeab 0x4ebffeab))
(assert_return (invoke "xor" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 0 0 0 0))
                             (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "xor" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 inf inf inf inf))
                             (v128.const i32x4 0x00400000 0x00400000 0x00400000 0x00400000))
(assert_return (invoke "xor" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                             (v128.const i32x4 0x30400000 0x30400000 0x30400000 0x30400000))
(assert_return (invoke "xor" (v128.const f32x4 inf inf inf inf)
                             (v128.const f32x4 0 0 0 0))
                             (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "xor" (v128.const f32x4 inf inf inf inf)
                             (v128.const f32x4 nan nan nan nan))
                             (v128.const i32x4 0x00400000 0x00400000 0x00400000 0x00400000))
(assert_return (invoke "xor" (v128.const f32x4 inf inf inf inf)
                             (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                             (v128.const i32x4 0x30000000 0x30000000 0x30000000 0x30000000))
(assert_return (invoke "xor" (v128.const f32x4 -nan -nan -nan -nan)
                             (v128.const f32x4 -inf -inf -inf -inf))
                             (v128.const i32x4 0x00400000 0x00400000 0x00400000 0x00400000))
(assert_return (invoke "xor" (v128.const f32x4 0 0 -1 -1)
                             (v128.const f32x4 0 -1 0 -1))
                             (v128.const f32x4 0 -1 -1 0))
(assert_return (invoke "xor" (v128.const f32x4 0 0 0 0)
                             (v128.const f32x4 0 0 0 0))
                             (v128.const f32x4 0 0 0 0))
(assert_return (invoke "xor" (v128.const f32x4 0 0 0 0)
                             (v128.const f32x4 -1 -1 -1 -1))
                             (v128.const f32x4 -1 -1 -1 -1))
(assert_return (invoke "xor" (v128.const f32x4 0 0 0 0)
                             (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                             (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "xor" (v128.const f32x4 1 1 1 1)
                             (v128.const f32x4 1 1 1 1))
                             (v128.const f32x4 0 0 0 0))
(assert_return (invoke "xor" (v128.const f32x4 255 255 255 255)
                             (v128.const f32x4 85 85 85 85))
                             (v128.const i32x4 0x01d50000 0x01d50000 0x01d50000 0x01d50000))
(assert_return (invoke "xor" (v128.const f32x4 255 255 255 255)
                             (v128.const f32x4 128 128 128 128))
                             (v128.const i32x4 0x007f0000 0x007f0000 0x007f0000 0x007f0000))
(assert_return (invoke "xor" (v128.const f32x4 2863311530 2863311530 2863311530 2863311530)
                             (v128.const f32x4 10 128 5 165))
                             (v128.const i32x4 0x0e0aaaab 0x0c2aaaab 0x0f8aaaab 0x0c0faaab))
(assert_return (invoke "xor" (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const f32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                             (v128.const i32x4 0x012aaaab 0x012aaaab 0x012aaaab 0x012aaaab))
(assert_return (invoke "xor" (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const f32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
                             (v128.const i32x4 0x00aaaaab 0x00aaaaab 0x00aaaaab 0x00aaaaab))
(assert_return (invoke "xor" (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const f32x4 0x0 0x0 0x0 0x0))
                             (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "xor" (v128.const f32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                             (v128.const f32x4 0x5555 0xFFFF 0x55FF 0x5FFF))
                             (v128.const i32x4 0x080000ab 0x09d555ab 0x080154ab 0x081554ab))
(assert_return (invoke "bitselect" (v128.const f32x4 nan nan nan nan)
                                   (v128.const f32x4 0 0 0 0)
                                   (v128.const f32x4 0x00000000 0x00000000 0x00000000 0x00000000))
                                   (v128.const f32x4 0x00000000 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "bitselect" (v128.const f32x4 nan nan nan nan)
                                   (v128.const f32x4 0 0 0 0)
                                   (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                                   (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "bitselect" (v128.const f32x4 nan nan nan nan)
                                   (v128.const f32x4 0 0 0 0)
                                   (v128.const f32x4 0xABABABAB 0xABABABAB 0xABABABAB 0xABABABAB))
                                   (v128.const i32x4 0x4f000000 0x4f000000 0x4f000000 0x4f000000))
(assert_return (invoke "bitselect" (v128.const f32x4 nan nan nan nan)
                                   (v128.const f32x4 inf inf inf inf)
                                   (v128.const f32x4 0x7f800000 0x7f800000 0x7f800000 0x7f800000))
                                   (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "bitselect" (v128.const f32x4 nan nan nan nan)
                                   (v128.const f32x4 inf inf inf inf)
                                   (v128.const f32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                                   (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "bitselect" (v128.const f32x4 nan nan nan nan)
                                   (v128.const f32x4 inf inf inf inf)
                                   (v128.const f32x4 0xABABABAB 0xABABABAB 0xABABABAB 0xABABABAB))
                                   (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "bitselect" (v128.const f32x4 -nan -nan -nan -nan)
                                   (v128.const f32x4 -inf -inf -inf -inf)
                                   (v128.const f32x4 0xABABABAB 0xABABABAB 0xABABABAB 0xABABABAB))
                                   (v128.const f32x4 -inf -inf -inf -inf))
(assert_return (invoke "bitselect" (v128.const f32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const f32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const f32x4 0x00112345 0xF00FFFFF 0x10112021 0xBBAABBAA))
                                   (v128.const i32x4 0x4f3aabbc 0x4f2babbc 0x4f3bbabd 0x4f2abba8))
(assert_return (invoke "bitselect" (v128.const f32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const f32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const f32x4 0x00000000 0x00000000 0x00000000 0x00000000))
                                   (v128.const f32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB))
(assert_return (invoke "bitselect" (v128.const f32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const f32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const f32x4 0x11111111 0x11111111 0x11111111 0x11111111))
                                   (v128.const i32x4 0x4f3bbbbd 0x4f3bbbbd 0x4f3bbbbd 0x4f3bbbbd))
(assert_return (invoke "bitselect" (v128.const f32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const f32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const f32x4 0x01234567 0x89ABCDEF 0xFEDCBA98 0x76543210))
                                   (v128.const i32x4 0x4f2abba8 0x4f3ababa 0x4f2babaf 0x4f3bbbb8))
(assert_return (invoke "bitselect" (v128.const f32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const f32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                                   (v128.const f32x4 0x01234567 0x89ABCDEF 0xFEDCBA98 0x76543210))
                                   (v128.const i32x4 0x4f2aaaab 0x4faaaaab 0x4faaaaab 0x4e2aaaab))
(assert_return (invoke "bitselect" (v128.const f32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const f32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                                   (v128.const f32x4 0x55555555 0xAAAAAAAA 0x00000000 0xFFFFFFFF))
                                   (v128.const i32x4 0x4e2aaaab 0x4faaaaab 0x4eaaaaab 0x4f2aaaab))

;; Type check

;; not
(assert_invalid (module (func (result v128) (v128.not (i32.const 0)))) "type mismatch")
;; and
(assert_invalid (module (func (result v128) (v128.and (i32.const 0) (v128.const i32x4 0 0 0 0)))) "type mismatch")
(assert_invalid (module (func (result v128) (v128.and (v128.const i32x4 0 0 0 0) (i32.const 0)))) "type mismatch")
(assert_invalid (module (func (result v128) (v128.and (i32.const 0) (i32.const 0)))) "type mismatch")
;; or
(assert_invalid (module (func (result v128) (v128.or (i32.const 0) (v128.const i32x4 0 0 0 0)))) "type mismatch")
(assert_invalid (module (func (result v128) (v128.or (v128.const i32x4 0 0 0 0) (i32.const 0)))) "type mismatch")
(assert_invalid (module (func (result v128) (v128.or (i32.const 0) (i32.const 0)))) "type mismatch")
;; xor
(assert_invalid (module (func (result v128) (v128.xor (i32.const 0) (v128.const i32x4 0 0 0 0)))) "type mismatch")
(assert_invalid (module (func (result v128) (v128.xor (v128.const i32x4 0 0 0 0) (i32.const 0)))) "type mismatch")
(assert_invalid (module (func (result v128) (v128.xor (i32.const 0) (i32.const 0)))) "type mismatch")
;; bitselect
(assert_invalid (module (func (result v128) (v128.bitselect (i32.const 0) (v128.const i32x4 0 0 0 0) (v128.const i32x4 0 0 0 0)))) "type mismatch")
(assert_invalid (module (func (result v128) (v128.bitselect (v128.const i32x4 0 0 0 0) (v128.const i32x4 0 0 0 0) (i32.const 0)))) "type mismatch")
(assert_invalid (module (func (result v128) (v128.bitselect (i32.const 0) (i32.const 0) (i32.const 0)))) "type mismatch")

;; Combination

(module (memory 1)
  (func (export "v128.not-in-block")
    (block
      (drop
        (block (result v128)
          (v128.not
            (block (result v128) (v128.load (i32.const 0)))
          )
        )
      )
    )
  )
  (func (export "v128.and-in-block")
    (block
      (drop
        (block (result v128)
          (v128.and
            (block (result v128) (v128.load (i32.const 0)))
            (block (result v128) (v128.load (i32.const 1)))
          )
        )
      )
    )
  )
  (func (export "v128.or-in-block")
    (block
      (drop
        (block (result v128)
          (v128.or
            (block (result v128) (v128.load (i32.const 0)))
            (block (result v128) (v128.load (i32.const 1)))
          )
        )
      )
    )
  )
  (func (export "v128.xor-in-block")
    (block
      (drop
        (block (result v128)
          (v128.xor
            (block (result v128) (v128.load (i32.const 0)))
            (block (result v128) (v128.load (i32.const 1)))
          )
        )
      )
    )
  )
  (func (export "v128.bitselect-in-block")
    (block
      (drop
        (block (result v128)
          (v128.bitselect
            (block (result v128) (v128.load (i32.const 0)))
            (block (result v128) (v128.load (i32.const 1)))
            (block (result v128) (v128.load (i32.const 2)))
          )
        )
      )
    )
  )
  (func (export "nested-v128.not")
    (drop
      (v128.not
        (v128.not
          (v128.not
            (v128.load (i32.const 0))
          )
        )
      )
    )
  )
  (func (export "nested-v128.and")
    (drop
      (v128.and
        (v128.and
          (v128.and
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
          (v128.and
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
        )
        (v128.and
          (v128.and
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
          (v128.and
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
        )
      )
    )
  )
  (func (export "nested-v128.or")
    (drop
      (v128.or
        (v128.or
          (v128.or
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
          (v128.or
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
        )
        (v128.or
          (v128.or
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
          (v128.or
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
        )
      )
    )
  )
  (func (export "nested-v128.xor")
    (drop
      (v128.xor
        (v128.xor
          (v128.xor
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
          (v128.xor
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
        )
        (v128.xor
          (v128.xor
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
          (v128.xor
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
          )
        )
      )
    )
  )
  (func (export "nested-v128.bitselect")
    (drop
      (v128.bitselect
        (v128.bitselect
          (v128.bitselect
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
            (v128.load (i32.const 2))
          )
          (v128.bitselect
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
            (v128.load (i32.const 2))
          )
          (v128.bitselect
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
            (v128.load (i32.const 2))
          )
        )
        (v128.bitselect
          (v128.bitselect
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
            (v128.load (i32.const 2))
          )
          (v128.bitselect
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
            (v128.load (i32.const 2))
          )
          (v128.bitselect
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
            (v128.load (i32.const 2))
          )
        )
        (v128.bitselect
          (v128.bitselect
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
            (v128.load (i32.const 2))
          )
          (v128.bitselect
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
            (v128.load (i32.const 2))
          )
          (v128.bitselect
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
            (v128.load (i32.const 2))
          )
        )
      )
    )
  )
  (func (export "as-param")
    (drop
      (v128.or
        (v128.and
          (v128.not
            (v128.load (i32.const 0))
          )
          (v128.not
            (v128.load (i32.const 1))
          )
        )
        (v128.xor
          (v128.bitselect
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
            (v128.load (i32.const 2))
          )
          (v128.bitselect
            (v128.load (i32.const 0))
            (v128.load (i32.const 1))
            (v128.load (i32.const 2))
          )
        )
      )
    )
  )
)
(assert_return (invoke "v128.not-in-block"))
(assert_return (invoke "v128.and-in-block"))
(assert_return (invoke "v128.or-in-block"))
(assert_return (invoke "v128.xor-in-block"))
(assert_return (invoke "v128.bitselect-in-block"))
(assert_return (invoke "nested-v128.not"))
(assert_return (invoke "nested-v128.and"))
(assert_return (invoke "nested-v128.or"))
(assert_return (invoke "nested-v128.xor"))
(assert_return (invoke "nested-v128.bitselect"))
(assert_return (invoke "as-param"))