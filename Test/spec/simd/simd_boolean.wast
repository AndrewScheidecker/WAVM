;; Test all the boolean operators on major boundary values and all special values.

(module
  (func (export "i8x16.any_true") (param $0 v128) (result i32) (i8x16.any_true (local.get $0)))
  (func (export "i8x16.all_true") (param $0 v128) (result i32) (i8x16.all_true (local.get $0)))

  (func (export "i16x8.any_true") (param $0 v128) (result i32) (i16x8.any_true (local.get $0)))
  (func (export "i16x8.all_true") (param $0 v128) (result i32) (i16x8.all_true (local.get $0)))

  (func (export "i32x4.any_true") (param $0 v128) (result i32) (i32x4.any_true (local.get $0)))
  (func (export "i32x4.all_true") (param $0 v128) (result i32) (i32x4.all_true (local.get $0)))
)

;; i8x16
(assert_return (invoke "i8x16.any_true" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
                                        (i32.const 0))
(assert_return (invoke "i8x16.any_true" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0))
                                        (i32.const 1))
(assert_return (invoke "i8x16.any_true" (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1))
                                        (i32.const 1))
(assert_return (invoke "i8x16.any_true" (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
                                        (i32.const 1))
(assert_return (invoke "i8x16.any_true" (v128.const i8x16 -1 0 1 2 3 4 5 6 7 8 9 0xA 0xB 0xC 0xD 0xF))
                                        (i32.const 1))
(assert_return (invoke "i8x16.any_true" (v128.const i8x16 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                                        (i32.const 0))
(assert_return (invoke "i8x16.any_true" (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
                                        (i32.const 1))
(assert_return (invoke "i8x16.any_true" (v128.const i8x16 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB))
                                        (i32.const 1))
(assert_return (invoke "i8x16.any_true" (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55))
                                        (i32.const 1))
(assert_return (invoke "i8x16.all_true" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
                                        (i32.const 0))
(assert_return (invoke "i8x16.all_true" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0))
                                        (i32.const 0))
(assert_return (invoke "i8x16.all_true" (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1))
                                        (i32.const 0))
(assert_return (invoke "i8x16.all_true" (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
                                        (i32.const 1))
(assert_return (invoke "i8x16.all_true" (v128.const i8x16 -1 0 1 2 3 4 5 6 7 8 9 0xA 0xB 0xC 0xD 0xF))
                                        (i32.const 0))
(assert_return (invoke "i8x16.all_true" (v128.const i8x16 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                                        (i32.const 0))
(assert_return (invoke "i8x16.all_true" (v128.const i8x16 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
                                        (i32.const 1))
(assert_return (invoke "i8x16.all_true" (v128.const i8x16 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB))
                                        (i32.const 1))
(assert_return (invoke "i8x16.all_true" (v128.const i8x16 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55))
                                        (i32.const 1))

;; i16x8
(assert_return (invoke "i16x8.any_true" (v128.const i16x8 0 0 0 0 0 0 0 0))
                                        (i32.const 0))
(assert_return (invoke "i16x8.any_true" (v128.const i16x8 0 0 0 0 0 0 1 0))
                                        (i32.const 1))
(assert_return (invoke "i16x8.any_true" (v128.const i16x8 1 1 1 1 1 1 0 1))
                                        (i32.const 1))
(assert_return (invoke "i16x8.any_true" (v128.const i16x8 1 1 1 1 1 1 1 1))
                                        (i32.const 1))
(assert_return (invoke "i16x8.any_true" (v128.const i16x8 -1 0 1 2 0xB 0xC 0xD 0xF))
                                        (i32.const 1))
(assert_return (invoke "i16x8.any_true" (v128.const i16x8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                                        (i32.const 0))
(assert_return (invoke "i16x8.any_true" (v128.const i16x8 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
                                        (i32.const 1))
(assert_return (invoke "i16x8.any_true" (v128.const i16x8 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB))
                                        (i32.const 1))
(assert_return (invoke "i16x8.any_true" (v128.const i16x8 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55))
                                        (i32.const 1))
(assert_return (invoke "i16x8.all_true" (v128.const i16x8 0 0 0 0 0 0 0 0))
                                        (i32.const 0))
(assert_return (invoke "i16x8.all_true" (v128.const i16x8 0 0 0 0 0 0 1 0))
                                        (i32.const 0))
(assert_return (invoke "i16x8.all_true" (v128.const i16x8 1 1 1 1 1 1 0 1))
                                        (i32.const 0))
(assert_return (invoke "i16x8.all_true" (v128.const i16x8 1 1 1 1 1 1 1 1))
                                        (i32.const 1))
(assert_return (invoke "i16x8.all_true" (v128.const i16x8 -1 0 1 2 0xB 0xC 0xD 0xF))
                                        (i32.const 0))
(assert_return (invoke "i16x8.all_true" (v128.const i16x8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00))
                                        (i32.const 0))
(assert_return (invoke "i16x8.all_true" (v128.const i16x8 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))
                                        (i32.const 1))
(assert_return (invoke "i16x8.all_true" (v128.const i16x8 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB))
                                        (i32.const 1))
(assert_return (invoke "i16x8.all_true" (v128.const i16x8 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55))
                                        (i32.const 1))

;; i32x4
(assert_return (invoke "i32x4.any_true" (v128.const i32x4 0 0 0 0))
                                        (i32.const 0))
(assert_return (invoke "i32x4.any_true" (v128.const i32x4 0 0 1 0))
                                        (i32.const 1))
(assert_return (invoke "i32x4.any_true" (v128.const i32x4 1 1 0 1))
                                        (i32.const 1))
(assert_return (invoke "i32x4.any_true" (v128.const i32x4 1 1 1 1))
                                        (i32.const 1))
(assert_return (invoke "i32x4.any_true" (v128.const i32x4 -1 0 1 0xF))
                                        (i32.const 1))
(assert_return (invoke "i32x4.any_true" (v128.const i32x4 0x00 0x00 0x00 0x00))
                                        (i32.const 0))
(assert_return (invoke "i32x4.any_true" (v128.const i32x4 0xFF 0xFF 0xFF 0xFF))
                                        (i32.const 1))
(assert_return (invoke "i32x4.any_true" (v128.const i32x4 0xAB 0xAB 0xAB 0xAB))
                                        (i32.const 1))
(assert_return (invoke "i32x4.any_true" (v128.const i32x4 0x55 0x55 0x55 0x55))
                                        (i32.const 1))
(assert_return (invoke "i32x4.all_true" (v128.const i32x4 0 0 0 0))
                                        (i32.const 0))
(assert_return (invoke "i32x4.all_true" (v128.const i32x4 0 0 1 0))
                                        (i32.const 0))
(assert_return (invoke "i32x4.all_true" (v128.const i32x4 1 1 0 1))
                                        (i32.const 0))
(assert_return (invoke "i32x4.all_true" (v128.const i32x4 1 1 1 1))
                                        (i32.const 1))
(assert_return (invoke "i32x4.all_true" (v128.const i32x4 -1 0 1 0xF))
                                        (i32.const 0))
(assert_return (invoke "i32x4.all_true" (v128.const i32x4 0x00 0x00 0x00 0x00))
                                        (i32.const 0))
(assert_return (invoke "i32x4.all_true" (v128.const i32x4 0xFF 0xFF 0xFF 0xFF))
                                        (i32.const 1))
(assert_return (invoke "i32x4.all_true" (v128.const i32x4 0xAB 0xAB 0xAB 0xAB))
                                        (i32.const 1))
(assert_return (invoke "i32x4.all_true" (v128.const i32x4 0x55 0x55 0x55 0x55))
                                        (i32.const 1))

;; f32x4
(assert_return (invoke "i8x16.any_true" (v128.const f32x4 nan nan nan nan))
                                        (i32.const 1))
(assert_return (invoke "i8x16.any_true" (v128.const f32x4 nan 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i8x16.any_true" (v128.const f32x4 inf 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i8x16.all_true" (v128.const f32x4 nan nan nan nan))
                                        (i32.const 0))
(assert_return (invoke "i8x16.all_true" (v128.const f32x4 inf inf inf inf))
                                        (i32.const 0))
(assert_return (invoke "i8x16.any_true" (v128.const f32x4 -0x0p+0 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i8x16.any_true" (v128.const f32x4 0x0p+0 0 0 0))
                                        (i32.const 0))
(assert_return (invoke "i8x16.any_true" (v128.const f32x4 0x1.fffffcp-127 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i8x16.all_true" (v128.const f32x4 -0x0p+0 -0x0p+0 -0x0p+0 -0x0p+0))
                                        (i32.const 0))
(assert_return (invoke "i8x16.all_true" (v128.const f32x4 0x0p+0 0x0p+0 0x0p+0 0x0p+0))
                                        (i32.const 0))
(assert_return (invoke "i8x16.all_true" (v128.const f32x4 0x1.fffffcp-127 0x1.fffffcp-127 0x1.fffffcp-127 0x1.fffffcp-127))
                                        (i32.const 0))
(assert_return (invoke "i16x8.any_true" (v128.const f32x4 nan nan nan nan))
                                        (i32.const 1))
(assert_return (invoke "i16x8.any_true" (v128.const f32x4 nan 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i16x8.any_true" (v128.const f32x4 inf 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i16x8.all_true" (v128.const f32x4 nan nan nan nan))
                                        (i32.const 0))
(assert_return (invoke "i16x8.all_true" (v128.const f32x4 inf inf inf inf))
                                        (i32.const 0))
(assert_return (invoke "i16x8.any_true" (v128.const f32x4 -0x0p+0 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i16x8.any_true" (v128.const f32x4 0x0p+0 0 0 0))
                                        (i32.const 0))
(assert_return (invoke "i16x8.any_true" (v128.const f32x4 0x1.fffffcp-127 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i16x8.all_true" (v128.const f32x4 -0x0p+0 -0x0p+0 -0x0p+0 -0x0p+0))
                                        (i32.const 0))
(assert_return (invoke "i16x8.all_true" (v128.const f32x4 0x0p+0 0x0p+0 0x0p+0 0x0p+0))
                                        (i32.const 0))
(assert_return (invoke "i16x8.all_true" (v128.const f32x4 0x1.fffffcp-127 0x1.fffffcp-127 0x1.fffffcp-127 0x1.fffffcp-127))
                                        (i32.const 1))
(assert_return (invoke "i32x4.any_true" (v128.const f32x4 nan 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i32x4.any_true" (v128.const f32x4 nan nan nan nan))
                                        (i32.const 1))
(assert_return (invoke "i32x4.any_true" (v128.const f32x4 inf 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i32x4.all_true" (v128.const f32x4 nan nan nan nan))
                                        (i32.const 1))
(assert_return (invoke "i32x4.all_true" (v128.const f32x4 inf inf inf inf))
                                        (i32.const 1))
(assert_return (invoke "i32x4.any_true" (v128.const f32x4 -0x0p+0 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i32x4.any_true" (v128.const f32x4 0x0p+0 0 0 0))
                                        (i32.const 0))
(assert_return (invoke "i32x4.any_true" (v128.const f32x4 0x1.fffffcp-127 0 0 0))
                                        (i32.const 1))
(assert_return (invoke "i32x4.all_true" (v128.const f32x4 -0x0p+0 -0x0p+0 -0x0p+0 -0x0p+0))
                                        (i32.const 1))
(assert_return (invoke "i32x4.all_true" (v128.const f32x4 0x0p+0 0x0p+0 0x0p+0 0x0p+0))
                                        (i32.const 0))
(assert_return (invoke "i32x4.all_true" (v128.const f32x4 0x1.fffffcp-127 0x1.fffffcp-127 0x1.fffffcp-127 0x1.fffffcp-127))
                                        (i32.const 1))


;; Combination

(module (memory 1)
    (func (export "i8x16_any_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (i8x16.any_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
    (func (export "i16x8_any_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (i16x8.any_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
    (func (export "i32x4_any_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (i32x4.any_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
    (func (export "i8x16_all_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (i8x16.all_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
    (func (export "i16x8_all_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (i16x8.all_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
    (func (export "i32x4_all_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (i32x4.all_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
)

;; 'any_true' as 'if' condition
;; i8x16
(assert_return (invoke "i8x16_any_true_as_if_cond" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
                                                   (i32.const 0))
(assert_return (invoke "i8x16_any_true_as_if_cond" (v128.const i8x16 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0))
                                                   (i32.const 1))
(assert_return (invoke "i8x16_any_true_as_if_cond" (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
                                                   (i32.const 1))
;; i16x8
(assert_return (invoke "i16x8_any_true_as_if_cond" (v128.const i16x8 0 0 0 0 0 0 0 0))
                                                   (i32.const 0))
(assert_return (invoke "i16x8_any_true_as_if_cond" (v128.const i16x8 0 0 1 0 0 0 1 0))
                                                   (i32.const 1))
(assert_return (invoke "i16x8_any_true_as_if_cond" (v128.const i16x8 1 1 1 1 1 1 1 1))
                                                   (i32.const 1))
;; i32x4
(assert_return (invoke "i32x4_any_true_as_if_cond" (v128.const i32x4 0 0 0 0))
                                                   (i32.const 0))
(assert_return (invoke "i32x4_any_true_as_if_cond" (v128.const i32x4 0 0 1 0))
                                                   (i32.const 1))
(assert_return (invoke "i32x4_any_true_as_if_cond" (v128.const i32x4 1 1 1 1))
                                                   (i32.const 1))

;; 'all_true' as 'if' condition
;; i8x16
(assert_return (invoke "i8x16_all_true_as_if_cond" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
                                                   (i32.const 0))
(assert_return (invoke "i8x16_all_true_as_if_cond" (v128.const i8x16 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0))
                                                   (i32.const 0))
(assert_return (invoke "i8x16_all_true_as_if_cond" (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
                                                   (i32.const 1))
;; i16x8
(assert_return (invoke "i16x8_all_true_as_if_cond" (v128.const i16x8 0 0 0 0 0 0 0 0))
                                                   (i32.const 0))
(assert_return (invoke "i16x8_all_true_as_if_cond" (v128.const i16x8 1 1 1 0 1 1 1 0))
                                                   (i32.const 0))
(assert_return (invoke "i16x8_all_true_as_if_cond" (v128.const i16x8 1 1 1 1 1 1 1 1))
                                                   (i32.const 1))
;; i32x4
(assert_return (invoke "i32x4_all_true_as_if_cond" (v128.const i32x4 0 0 0 0))
                                                   (i32.const 0))
(assert_return (invoke "i32x4_all_true_as_if_cond" (v128.const i32x4 1 1 1 0))
                                                   (i32.const 0))
(assert_return (invoke "i32x4_all_true_as_if_cond" (v128.const i32x4 1 1 1 1))
                                                   (i32.const 1))


;; Type check

(assert_invalid (module (func (result i32) (i8x16.any_true (i32.const 0)))) "type mismatch")
(assert_invalid (module (func (result i32) (i8x16.all_true (i32.const 0)))) "type mismatch")
(assert_invalid (module (func (result i32) (i16x8.any_true (i32.const 0)))) "type mismatch")
(assert_invalid (module (func (result i32) (i16x8.all_true (i32.const 0)))) "type mismatch")
(assert_invalid (module (func (result i32) (i32x4.any_true (i32.const 0)))) "type mismatch")
(assert_invalid (module (func (result i32) (i32x4.all_true (i32.const 0)))) "type mismatch")

;; Unknown operators

(assert_malformed (module quote "(memory 1) (func (result i32) (f32x4.any_true (v128.const i32x4 0 0 0 0)))") "unknown operator")
(assert_malformed (module quote "(memory 1) (func (result i32) (f32x4.all_true (v128.const i32x4 0 0 0 0)))") "unknown operator")
(assert_malformed (module quote "(memory 1) (func (result i32) (f64x2.any_true (v128.const i32x4 0 0 0 0)))") "unknown operator")
(assert_malformed (module quote "(memory 1) (func (result i32) (f64x2.all_true (v128.const i32x4 0 0 0 0)))") "unknown operator")