(module
  (memory i32 1000)
  
  (func (export "i64 copy loop")
    (param $dest i32) (param $source i32) (param $numBytes i32)
    (if $exitCopyLoop (i32.lt_u (local.get $source) (local.get $dest))
      (then
        loop $copyLoop
          (br_if $exitCopyLoop (i32.eq (local.get $numBytes) (i32.const 0)))
          (local.set $numBytes (i32.sub (local.get $numBytes) (i32.const 8)))
          (i64.store
            (i32.add (local.get $dest) (local.get $numBytes))
            (i64.load (i32.add (local.get $source) (local.get $numBytes))))
          (br $copyLoop)
        end
      ) (else
        loop $copyLoop
          (br_if $exitCopyLoop (i32.eq (local.get $numBytes) (i32.const 0)))
          (i64.store
            (local.get $dest)
            (i64.load (local.get $source)))
          (local.set $numBytes (i32.sub (local.get $numBytes) (i32.const 8)))
          (local.set $dest (i32.add (local.get $dest) (i32.const 8)))
          (local.set $source (i32.add (local.get $source) (i32.const 8)))
          (br $copyLoop)
        end
      )
    )
  )
)

(benchmark "32-bit i64 copy loop (forward, 8B)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 8)))
(benchmark "32-bit i64 copy loop (forward, 16B)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 16)))
(benchmark "32-bit i64 copy loop (forward, 32B)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 32)))
(benchmark "32-bit i64 copy loop (forward, 64B)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 64)))
(benchmark "32-bit i64 copy loop (forward, 128B)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 128)))
(benchmark "32-bit i64 copy loop (forward, 256B)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 256)))
(benchmark "32-bit i64 copy loop (forward, 512B)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 512)))
(benchmark "32-bit i64 copy loop (forward, 1KB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 1024)))
(benchmark "32-bit i64 copy loop (forward, 2KB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 2048)))
(benchmark "32-bit i64 copy loop (forward, 4KB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 4096)))
(benchmark "32-bit i64 copy loop (forward, 8KB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 8192)))
(benchmark "32-bit i64 copy loop (forward, 16KB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 16384)))
(benchmark "32-bit i64 copy loop (forward, 32KB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 32768)))
(benchmark "32-bit i64 copy loop (forward, 64KB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 65536)))
(benchmark "32-bit i64 copy loop (forward, 128KB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 131072)))
(benchmark "32-bit i64 copy loop (forward, 256KB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 262144)))
(benchmark "32-bit i64 copy loop (forward, 512KB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 524288)))
(benchmark "32-bit i64 copy loop (forward, 1MB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 1048576)))
(benchmark "32-bit i64 copy loop (forward, 2MB)" (invoke "i64 copy loop" (i32.const 0) (i32.const 8) (i32.const 2097152)))
(benchmark "32-bit i64 copy loop (reverse, 8B)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 8)))
(benchmark "32-bit i64 copy loop (reverse, 16B)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 16)))
(benchmark "32-bit i64 copy loop (reverse, 32B)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 32)))
(benchmark "32-bit i64 copy loop (reverse, 64B)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 64)))
(benchmark "32-bit i64 copy loop (reverse, 128B)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 128)))
(benchmark "32-bit i64 copy loop (reverse, 256B)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 256)))
(benchmark "32-bit i64 copy loop (reverse, 512B)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 512)))
(benchmark "32-bit i64 copy loop (reverse, 1KB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 1024)))
(benchmark "32-bit i64 copy loop (reverse, 2KB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 2048)))
(benchmark "32-bit i64 copy loop (reverse, 4KB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 4096)))
(benchmark "32-bit i64 copy loop (reverse, 8KB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 8192)))
(benchmark "32-bit i64 copy loop (reverse, 16KB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 16384)))
(benchmark "32-bit i64 copy loop (reverse, 32KB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 32768)))
(benchmark "32-bit i64 copy loop (reverse, 64KB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 65536)))
(benchmark "32-bit i64 copy loop (reverse, 128KB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 131072)))
(benchmark "32-bit i64 copy loop (reverse, 256KB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 262144)))
(benchmark "32-bit i64 copy loop (reverse, 512KB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 524288)))
(benchmark "32-bit i64 copy loop (reverse, 1MB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 1048576)))
(benchmark "32-bit i64 copy loop (reverse, 2MB)" (invoke "i64 copy loop" (i32.const 8) (i32.const 0) (i32.const 2097152)))

(module
  (memory i64 1000)

  (func (export "i64 copy loop")
    (param $dest i64) (param $source i64) (param $numBytes i64)
    (if $exitCopyLoop (i64.lt_u (local.get $source) (local.get $dest))
      (then
        loop $copyLoop
          (br_if $exitCopyLoop (i64.eq (local.get $numBytes) (i64.const 0)))
          (local.set $numBytes (i64.sub (local.get $numBytes) (i64.const 8)))
          (i64.store
            (i64.add (local.get $dest) (local.get $numBytes))
            (i64.load (i64.add (local.get $source) (local.get $numBytes))))
          (br $copyLoop)
        end
      ) (else
        loop $copyLoop
          (br_if $exitCopyLoop (i64.eq (local.get $numBytes) (i64.const 0)))
          (i64.store
            (local.get $dest)
            (i64.load (local.get $source)))
          (local.set $numBytes (i64.sub (local.get $numBytes) (i64.const 8)))
          (local.set $dest (i64.add (local.get $dest) (i64.const 8)))
          (local.set $source (i64.add (local.get $source) (i64.const 8)))
          (br $copyLoop)
        end
      )
    )
  )
)

(benchmark "64-bit i64 copy loop (forward, 8B)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 8)))
(benchmark "64-bit i64 copy loop (forward, 16B)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 16)))
(benchmark "64-bit i64 copy loop (forward, 32B)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 32)))
(benchmark "64-bit i64 copy loop (forward, 64B)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 64)))
(benchmark "64-bit i64 copy loop (forward, 128B)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 128)))
(benchmark "64-bit i64 copy loop (forward, 256B)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 256)))
(benchmark "64-bit i64 copy loop (forward, 512B)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 512)))
(benchmark "64-bit i64 copy loop (forward, 1KB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 1024)))
(benchmark "64-bit i64 copy loop (forward, 2KB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 2048)))
(benchmark "64-bit i64 copy loop (forward, 4KB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 4096)))
(benchmark "64-bit i64 copy loop (forward, 8KB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 8192)))
(benchmark "64-bit i64 copy loop (forward, 16KB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 16384)))
(benchmark "64-bit i64 copy loop (forward, 32KB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 32768)))
(benchmark "64-bit i64 copy loop (forward, 64KB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 65536)))
(benchmark "64-bit i64 copy loop (forward, 128KB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 131072)))
(benchmark "64-bit i64 copy loop (forward, 256KB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 262144)))
(benchmark "64-bit i64 copy loop (forward, 512KB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 524288)))
(benchmark "64-bit i64 copy loop (forward, 1MB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 1048576)))
(benchmark "64-bit i64 copy loop (forward, 2MB)" (invoke "i64 copy loop" (i64.const 0) (i64.const 8) (i64.const 2097152)))
(benchmark "64-bit i64 copy loop (reverse, 8B)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 8)))
(benchmark "64-bit i64 copy loop (reverse, 16B)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 16)))
(benchmark "64-bit i64 copy loop (reverse, 32B)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 32)))
(benchmark "64-bit i64 copy loop (reverse, 64B)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 64)))
(benchmark "64-bit i64 copy loop (reverse, 128B)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 128)))
(benchmark "64-bit i64 copy loop (reverse, 256B)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 256)))
(benchmark "64-bit i64 copy loop (reverse, 512B)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 512)))
(benchmark "64-bit i64 copy loop (reverse, 1KB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 1024)))
(benchmark "64-bit i64 copy loop (reverse, 2KB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 2048)))
(benchmark "64-bit i64 copy loop (reverse, 4KB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 4096)))
(benchmark "64-bit i64 copy loop (reverse, 8KB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 8192)))
(benchmark "64-bit i64 copy loop (reverse, 16KB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 16384)))
(benchmark "64-bit i64 copy loop (reverse, 32KB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 32768)))
(benchmark "64-bit i64 copy loop (reverse, 64KB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 65536)))
(benchmark "64-bit i64 copy loop (reverse, 128KB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 131072)))
(benchmark "64-bit i64 copy loop (reverse, 256KB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 262144)))
(benchmark "64-bit i64 copy loop (reverse, 512KB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 524288)))
(benchmark "64-bit i64 copy loop (reverse, 1MB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 1048576)))
(benchmark "64-bit i64 copy loop (reverse, 2MB)" (invoke "i64 copy loop" (i64.const 8) (i64.const 0) (i64.const 2097152)))
