stages:
  - stage:
    displayName: Build
    jobs:
      # Win64 VS2017
      - template: Build/azure-pipelines/windows-build-job-template.yml
        parameters:
          name: Win64_VS2017
          vsVersion: '2017'
          platform: 'x64'
          llvmBuildBaseName: 'Win64'
          llvmVersion: '9.x'

      # Win64 VS2019
      - template: Build/azure-pipelines/windows-build-job-template.yml
        parameters:
          name: Win64_VS2019
          vsVersion: '2019'
          platform: 'x64'
          llvmBuildBaseName: 'Win64'
          llvmVersion: '9.x'

      # Win32 VS2019
      - template: Build/azure-pipelines/windows-build-job-template.yml
        parameters:
          name: Win32_VS2019
          vsVersion: '2019'
          platform: 'x86'
          llvmBuildBaseName: 'Win32'
          llvmVersion: '9.x'

      # Ubuntu 16.04 GCC
      - template: Build/azure-pipelines/posix-build-job-template.yml
        parameters:
          name: Ubuntu1604_GCC
          vmImage: 'ubuntu-16.04'
          container: 'wavm/ubuntu16.04-builder:latest'
          llvmBuildBaseName: 'Ubuntu1604'
          llvmVersion: '9.x'
          cpackGenerators: 'TGZ;DEB'
          compiler: 'gcc'

      # Ubuntu 16.04 Clang
      - template: Build/azure-pipelines/posix-build-job-template.yml
        parameters:
          name: Ubuntu1604_Clang
          vmImage: 'ubuntu-16.04'
          container: 'wavm/ubuntu16.04-builder:latest'
          llvmBuildBaseName: 'Ubuntu1604'
          llvmVersion: '9.x'
          cpackGenerators: 'TGZ;DEB'
          compiler: 'clang'

      # CentOS 7.0 Clang
      - template: Build/azure-pipelines/posix-build-job-template.yml
        parameters:
          name: CentOS70_Clang
          vmImage: 'ubuntu-16.04'
          container: 'wavm/centos7.0-builder:latest'
          llvmBuildBaseName: 'Centos70'
          llvmVersion: '9.x'
          cpackGenerators: 'TGZ;RPM'
          compiler: 'clang'

      # MacOS 10.14
      - template: Build/azure-pipelines/posix-build-job-template.yml
        parameters:
          name: MacOS
          vmImage: 'macOS-10.14'
          llvmBuildBaseName: 'MacOS'
          llvmVersion: '9.x'
          cpackGenerators: 'TGZ'
          compiler: 'appleClang'
          toolchainInstallSteps:
            - script: brew install ninja
              displayName: Install Ninja


  - stage:
    # Only upload a "nightly" build if this is the scheduled build of the master branch (implies it's not a pull request).
    condition:
      and(
        succeeded(),
        or(
          and(
            eq(variables['Build.SourceBranch'], 'refs/heads/master'),
            eq(variables['Build.Reason'], 'Schedule')
          ),
          eq(variables['WAVM.ForceNightlyRelease'], 'true')
        )
      )
    displayName: Create nightly GitHub release
    jobs:
      - template: Build/azure-pipelines/release-job-template.yml

  # Notify Discord of success or failure.
  # AFAICT the Azure Pipelines succeeded() and failed() predicates aren't able to observe the
  # result of other stages unless they are in the stage condition.
  - stage:
    displayName: Notify Discord (succeeded)
    condition: succeeded()
    jobs:
      - job: NotifyDiscordSuccess
        displayName: Notify Discord (succeeded)
        pool: { vmImage: macOS-10.14 }
        steps:
        - bash: $(Build.SourcesDirectory)/Build/notify-discord.sh success $DISCORD_WEBHOOK_URL
          displayName: Notify Discord
          env: { DISCORD_WEBHOOK_URL: $(DISCORD_WEBHOOK_URL) }
  - stage:
    displayName: Notify Discord (failed)
    condition: failed()
    jobs:
      - job: NotifyDiscordFailure
        displayName: Notify Discord (failed)
        pool: { vmImage: macOS-10.14 }
        steps:
        - bash: $(Build.SourcesDirectory)/Build/notify-discord.sh failure $DISCORD_WEBHOOK_URL
          displayName: Notify Discord
          env: { DISCORD_WEBHOOK_URL: $(DISCORD_WEBHOOK_URL) }